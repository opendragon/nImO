% File: MpMmpmDiagram.mpinput rboxesinput TEXTEXPRE("%&latex" & char(10) & "\documentclass{report}\begin{document}");TEXPOST("\end{document}");numeric gap, arrowFactor, roundOut;pair arrowHorizStartCorrection, arrowHorizEndCorrection;pair arrowVertStartCorrection, arrowVertEndCorrection;pair leftGap, rightGap;pair netTop, netBottom;arrowFactor := 3;gap := 16;arrowHorizStartCorrection := (1 / 2, 0);arrowHorizEndCorrection := (1 / 1.1, 0);arrowVertStartCorrection := (0, - 1 / 2);arrowVertEndCorrection := (0, - 1 / 1.1);leftGap := (5, 0);rightGap := (7, 0);shadow := 1;defaultdx := 4;defaultdy := 8;vardef drawshadowed(text t) =  fixsize(t);  forsuffixes s=t:    fill bpath.s shifted (shadow,-shadow);    unfill bpath.s;    drawboxed(s);  endforenddef;vardef drawshadow(text t) =  forsuffixes s=t:    fill bpath.s shifted (shadow,-shadow);    unfill bpath.s;  endforenddef;vardef drawdashed(text t) =  fixsize(t);  pickup pencircle scaled 1.25;  forsuffixes s=t:    draw bpath.s dashed evenly;  endfor  pickup defaultpen;enddef;verbatimtex \def\stk#1#2{$\displaystyle{\matrix{#1\cr#2\cr}}$} etex% Make the output recognizable as EPS and embed any needed fonts, for viewingprologues := 3;beginfig(-1);boxit.basicClient1(btex Basic Client etex);boxit.basicClient2(btex Basic Client etex);boxit.basicService1(btex Basic Service etex);boxit.basicService2(btex Basic Service etex);boxit.basicService3(btex Basic Service etex);boxit.adapter(btex etex);boxit.ioService(btex etex);boxit.registry(btex etex);boxit.yarp(btex YARP Name Server etex);boxit.core(btex etex);boxit.db(btex \vbox{\hbox{Registry}\hbox{Service}\hbox{Database}} etex);boxit.simpleService(btex etex);boxit.simpleClient(btex etex);xpart adapter.w = xpart basicClient1.w - .5gap;xpart adapter.e = xpart basicClient1.e + .5gap;ypart adapter.s = ypart basicClient1.s;ypart adapter.n = ypart basicClient1.n + 1.5gap;xpart ioService.w = xpart basicService1.w - .5gap;xpart ioService.e = xpart basicService1.e + .5gap;ypart ioService.s = ypart basicService1.s;ypart ioService.n = ypart basicService1.n + 1.5gap;xpart registry.w = xpart basicService3.w - .5gap;xpart registry.e = xpart basicService3.e + .5gap;ypart registry.s = ypart basicService3.s;ypart registry.n = ypart basicService3.n + 1.5gap;xpart simpleService.w = xpart basicService2.w - .5gap;xpart simpleService.e = xpart basicService2.e + .5gap;ypart simpleService.s = ypart basicService2.s;ypart simpleService.n = ypart basicService2.n + 1.5gap;xpart simpleClient.w = xpart basicClient2.w - .5gap;xpart simpleClient.e = xpart basicClient2.e + .5gap;ypart simpleClient.s = ypart basicClient2.s;ypart simpleClient.n = ypart basicClient2.n + 1.5gap;basicClient1.e - basicClient1.w = basicService1.e - basicService1.w;basicClient2.e - basicClient2.w = basicService1.e - basicService1.w;basicService2.e - basicService2.w = basicService1.e - basicService1.w;basicService3.e - basicService3.w = basicService1.e - basicService1.w;simpleService.nw = adapter.se + (-gap, -1.5gap);simpleClient.nw = simpleService.sw + (0, -2gap);ioService.ne = simpleClient.se + (0, -1.5gap);registry.nw = simpleService.ne + (5gap, -3gap);yarp.nw = ioService.se + (2.5gap, -1.5gap);core.nw = registry.nw + (-gap, 3.5gap);core.se = registry.se + (6.5gap, -2gap);fixsize(basicService1, basicService2, basicService3, basicClient1,		basicClient2, adapter, ioService, registry, simpleService, simpleClient, yarp,		core);		drawshadowed(adapter, ioService, registry, simpleService, simpleClient, yarp);drawboxed(basicClient1, basicClient2, basicService1, basicService2, basicService3);drawdashed(core);pair dbTop, dbBottom;dbTop := registry.ne + (4gap, -.25gap);dbBottom := registry.se + (4gap, 0);path pa, pb;pa := fullcircle xscaled 50 yscaled 10;pb := subpath (4, 8) of fullcircle xscaled 50 yscaled 10;draw pa shifted dbTop;draw pb shifted dbBottom;pair sa, ea;sa := point 0 of pa;ea := point 4 of pa;draw sa + dbTop -- sa + dbBottom;draw ea + dbTop -- ea + dbBottom;db.nw = ea + dbTop;drawunboxed(db);label(btex Adapter etex, adapter.n - (0, .75gap));label(btex I/O Service etex, ioService.n - (0, .75gap));label(btex Service etex, simpleService.n - (0, .75gap));label(btex Client etex, simpleClient.n - (0, .75gap));label(btex Registry Service etex, registry.n - (0, .75gap));label(btex Core etex scaled 1.5, core.n - (0, 1.25gap));pair netLeft, netRight;netLeft = (xpart adapter.w, ypart yarp.s) + (-2.5gap, -5gap);netRight = (xpart core.e, ypart yarp.s) + (gap, -5gap);ahlength := 6;ahangle := 60;linejoin := mitered;liecap := butt;pickup pencircle scaled arrowFactor;drawdblarrow netLeft -- netRight;pickup defaultpen;pair thickLineTweak;thickLineTweak := (arrowFactor * arrowVertEndCorrection) + (0, arrowFactor / 3);color brown, blueGreen, darkGreen;brown := (0.59, 0.29, 0);blueGreen := (0.05, 0.60, 0.73);darkGreen := (0.09, 0.45, 0.27);numeric coreConnDelta, between;coreConnDelta := (ypart core.n - ypart core.s) / 4;between := (xpart core.w + xpart simpleService.e) / 2;drawdblarrow yarp.s + arrowVertEndCorrection --		(xpart yarp.s, ypart netLeft) - thickLineTweak;drawdblarrow ioService.s + arrowVertEndCorrection --		(xpart ioService.s, ypart netLeft) - thickLineTweak;drawdblarrow core.s + arrowVertEndCorrection --		(xpart core.s, ypart netLeft) - thickLineTweak;drawdblarrow adapter.w - arrowHorizEndCorrection --		adapter.w - (gap, 0) --		(xpart adapter.w, ypart netLeft) - thickLineTweak - (gap, 0);drawdblarrow registry.s + arrowVertEndCorrection --		(xpart registry.s, (ypart registry.s + ypart yarp.n) / 2) --		(xpart yarp.n, (ypart registry.s + ypart yarp.n) / 2) --		yarp.n - arrowVertEndCorrection;drawdblarrow registry.e + arrowHorizEndCorrection --		(xpart dbTop, ypart registry.e) + ea - arrowHorizEndCorrection withcolor		darkGreen withpen pencircle scaled 1pt;drawdblarrow adapter.s + arrowVertEndCorrection --		(xpart adapter.s, ypart simpleService.w) --		simpleService.w - arrowHorizEndCorrection withcolor brown;drawdblarrow simpleService.s + arrowVertEndCorrection --		simpleClient.n - arrowVertEndCorrection withcolor brown;drawdblarrow adapter.e + arrowHorizEndCorrection --		(between, ypart adapter.e) -- (between, ypart core.w + 1.5coreConnDelta) --		core.w + (0, 1.5coreConnDelta) - arrowHorizEndCorrection withcolor blueGreen;drawdblarrow simpleService.e + arrowHorizEndCorrection --		(between, ypart simpleService.e) -- (between, ypart core.w + 0.5coreConnDelta) --		core.w + (0, 0.5coreConnDelta) - arrowHorizEndCorrection withcolor blueGreen;drawdblarrow simpleClient.e + arrowHorizEndCorrection --		(between, ypart simpleClient.e) -- (between, ypart core.w - 0.5coreConnDelta) --		core.w - (0, 0.5coreConnDelta) - arrowHorizEndCorrection withcolor blueGreen;drawdblarrow ioService.e + arrowHorizEndCorrection --		(between, ypart ioService.e) -- (between, ypart core.w - 1.5coreConnDelta) --		core.w - (0, 1.5coreConnDelta) - arrowHorizEndCorrection withcolor blueGreen;				label(btex YARP network etex scaled 1.25, ((xpart netLeft + xpart netRight) / 2,		ypart netLeft - .75gap));endfig;end