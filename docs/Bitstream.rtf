{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww26240\viewh23980\viewkind0
\deftab720
\pard\tx760\tx1237\tx1745\tx2176\tx2639\tx3034\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
Seven kinds of data -\
1) Signed integer\
2) 64-bit floating point\
3) Boolean\
4) IPv4 address/Date/Time\
5) Character string / binary blob\
6) Containers (array / set / map)\
\
Bits are numbered from MSB; bytes are in 
\f1\b PACKET_ORDER
\f0\b0  (BIG_ENDIAN)\
\
Lead byte:\
bit0..1\
	00 Signed integer [Enumerable] \{0x00\}\
		bit2=0 Short \{0x00\} value\
			bit3..7 (-16..15) [bit 3 is the sign bit]\
		bit2=1 Long \{0x20\} value\
			bit3..4 Reserved (set to zero)\
			bit5..7 Number of bytes to follow-1 (1..8), 
\f1\b PACKET_ORDER
\f0\b0 , sign extended\
	01 Floating-point (double) [Not Enumerable] \{0x40\}\
		bit2=0 Short \{0x00\} count-1 of floating-point values to follow\
			bit3..7 (1..32), count of values which follow (8 bytes/value, 
\f1\b PACKET_ORDER
\f0\b0 )\
		bit2=1 Long \{0x20\} count-1 of floating-point values in next byte(s) \{0x20\}\
			bit3..4 Reserved (set to zero)\
			bit5..7 Number of bytes for count-1 (1..8) [floating-point values (8 bytes/value) are in 
\f1\b PACKET_ORDER
\f0\b0 ]\
	10 String [Enumerable, not NULL-terminated] / Blob [Not Enumerable] \{0x80\}\
		bit2=0 String \{0x00\}\
		bit2=1 Blob \{0x20\}\
		bit3=0 Short \{0x00\} length\
			bit4..7 (0..15), bytes follow\
		bit3=1 Long \{0x40\} length in next byte(s) \{0x10\}\
			bit4 Reserved (set to zero)\
			bit5..7 Number of bytes for length-1 (1..8), 
\f1\b PACKET_ORDER
\f0\b0 , bytes follow\
	11 Other \{0xC0\}\
		bit2..3\
\cf2 			00 Miscellaneous\
				bit4..5\
					00 Boolean [Enumerable] \{0x00\}\
						bit6 Reserved (set to zero)\
						bit7=0 False \{0x00\}\
						bit7=1 True \{0x01\}\
					01 Bitfield \{0x04\}\
						bit6..7\
							00 IPv4 address [Enumerable] \{0x00\}; followed by four bytes in 
\f1\b PACKET_ORDER
\f0\b0  \
							01 Date [Enumerable] \{0x01\}; followed by four bytes in 
\f1\b PACKET_ORDER - zero is 1 January 0
\f0\b0 \
							10 Time [Enumerable] \{0x02\}; followed by four bytes in 
\f1\b PACKET_ORDER - zero is midnight UTC
\f0\b0 \
							11 Reserved \{0x03\}\
					10 Reserved \{0x08\}\
					11 Reserved \{0x0C\}\
\cf0 			01 Start of container (sequence of values) [Not Enumerable] \{0x10\}\
				bit4..5\
					00 Array \{0x00\}\
					01 Map \{0x04\} [key/value pairs follow, in key order]\
					10 Set \{0x08\}\
					11 Reserved \{0x0C\}\
				bit6 Reserved (set to zero)\
				bit7=0 Empty \{0x00\}\
				bit7=1 Non-empty \{0x01\}, number of elements-17 follows, as signed integer \{0x00\}; note that the value is offset by -17 as negative counts are not possible and at least one value is present\
			10 End of container (sequence of values)[Not Enumerable] \{0x20\}\
				bit4..5\
					00 Array \{0x00\}\
					01 Map \{0x04\}\
					10 Set \{0x08\}\
					11 Reserved \{0x0C\}\
				bit6 Reserved (set to zero)\
				bit7=0 Empty \{0x00\}\
				bit7=1 Non-empty \{0x01\}\
			11 Start / End message [Not Enumerable]\{0x30\}\
				bit4=0 Start of message \{0x00\}\
				bit4=1 End of message \{0x08\}\
				bit5=0 Empty \{0x00\}\
				bit5=1 Non-empty \{0x04\}\
				bit6..7 Expected first / last value in message if non-empty [top two bits of value type]\
\
note that there is no explicit restriction on the elements; for a map, the elements are expected to be a key / value pair, with the key being an Enumerable, but the format does not add this as a constraint.\
the start / end of container entries are used for validation\
\
to assure correct start-of-message, the appearance of 11110yyy (0xF0-0xF7 [0360-0367]) bytes in a message are 'escaped' when sent; they are preceded by the escape byte, and have the high bit inverted; occurrences of the escape byte are preceded by the escape byte and have the high bit inverted.\
the escape byte is 11011100 (0xDC [0334]) - if it appears in a message, it is removed and the next byte has its high bit flipped.\
thus, the start-of-message can be located in a byte stream, without the risk of a 'false start'.\
Also, follow a message by an escaped checksum.\
\
Examples - [octal]\
SME is 11110xyy [036z] (x=0 for empty message, x=1 for non-empty message, yy=value type of first part of message)\
EME is 11111xyy [037z]\
SAR is 1101000x [032z] (x=0 for empty array, x=1 for non-empty array, element count follows) \
EAR is 1110000x [034z]\
SMA is 1101010x [032z] (x=0 for empty map, x=1 for non-empty map, element count follows)\
EMA is 1110010x [034z]\
SSE is 1101100x [033z] (x=0 for empty set, x=1 for non-empty set, element count follows)\
ESE is 1110100x [035z]\
False is 11000000 [0300]\
True is 11000001 [0301]\
0 is 00000000 [0000]\
13 is 00001101 [0015]\
-13 is 00010011 [0023]\
144 is 00100001 [0041] 00000000 [0000] 10010000 [0220]\
-144 is 00100001 [0041] 11111111 [0377] 01110000 [0160]\
1.23 2.34 4.56 is 01000010 [0102] fd(1.23) fd(2.34) fd(4.56), where fd(x) is the binary representation of the double value x in 
\f1\b PACKET_ORDER
\f0\b0 \
"" is 10000000 [0200]\
"abc" is 1000 0011 b('a') b('b') b('c'), where b(x) is the binary representation of the character x\
"abcde abcde abcde abcde abcde abcde " is 10010000 [0220] 00100100 [0044] b('a') b('b') b('c') b('d') b('e') b(' ') \'85 b('e') b(' ')\
\
messages are sent as MIME-encoded data, with two CRLF pairs to mark the end of the data when sent via TCP or as the raw data when sent via UDP. \
}