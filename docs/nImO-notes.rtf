{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww26480\viewh24780\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 nImO \'97> support TCP, UDP, UDT?; OSC I/O ?\
\
nImO nodes have a command/response port, recorded in the Registry.\
This port is used to report the channels available, their status and 'mode'; it also responds to connect / disconnect requests and is used to determine if there are other nodes reporting the same names as the node wants to support.\
When a node is initialized, it advertises its command/response port, as well as the (initial) channels that it has - after checking if it is already running.\
The channel 'modes':\
	'IN' = a 'server' channel that can make a connection to an 'OUT' channel, but only is unidirectional 'in'\
	'OUT' = a 'client' channel that can make a single connection to an 'IN' channel and is unidirectional 'out'; multiple logical 'out' connections are made via multiple physical connections\
Note that the command/response port is not displayed in the GUI, as it is an implementation issue.\
Command-line tools (and the GUI) can interact with the command/response ports, via code that uses the Registry mechanisms to interrogate the advertised ports.\
Packages are placed on queues and handled by I/O services; a package has a tag (source or destination port number) and a pointer to a message.\
Each channel records its index within the set of input or output channels and, for input channels, uses the index as the tag for the received message; I/O services can use the index of a package to determine what to do with the associated message, and output channels can ignore the index.\
\
nImO contexts manage the channels (and threads to support I/O with them) as well as the identity of the nImO node - a context is created before doing any nImO operations, such as searching for a channel, registering or deregistering a channel, et cetera, is passed to all nImO I/O operations and is destroyed when completing all nImO operations.\
1) Create context/RAII\
2) Assign name for node in context => if already present [checked via Registry], fail\
3) Register node in Registry via proxy [Registry operations]\
4) Register channels for node in context [Registry operations]\
5) Signal 'operational' status?\
6) \'85.\
n-4) Signal 'shutdown' status?\
n-3) Close active connections to node channels\
n-2) Deregister node channels in context [Registry operations]\
n-1) Deregister node [Registry operations]\
n) Destroy context/RAII\
\
<name> ::= [[:alnum:]$]+([_.-][[:alnum:]$]+)* \'97> Names can contain $, period, minus or underscore but cannot start or end with a period, minus or underscore and are case-insensitive.\
<node_name> ::= name\
<network_name> ::= name\
<path> ::= (/<name>)+ \'97> Paths start with a forward slash but do not have a trailing slash.\
<mode> ::= #(UDP|TCP|ANY) -> Case-insensitive\
<channel> ::= (<network_name>?:)?<node_name>?<path><mode>?  \'97> The node name is 'optional' when parsed but required in actual use.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf0 Node names:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0 \cf0 [Network:]Name  - where Network is established by a Bridge and Name is self-assigned; no Network implies the same subnet; the name comes from the host name and service name or is directly provided.\
The default node name is <computer short name>-<service name>, but Launcher services do not have channels so this is not critical.\
The node name can be modified by a tag, so it will be <node>-<tag> to allow multiple copies of a service on a machine.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf0 Channel names:
\f0\b0 \
[NodeName]/arbitrary-path[#Protocol] - where Protocol is in \{UDP, TCP, \'85\}; (physical) ports are assigned by the system; no Protocol implies TCP\
If the NodeName is not specified, it implies the machine where the service is running and the NodeName of the only service on the machine - it's an error to not specify the NodeName if there is more than one service running or if the only services are Launchers; note that services will always report their node name but command-line tools can follow this rule.\
\
Minimal Channel = node/arbitrary-path; maximal Channel = network:node/arbitrary-path#protocol\
\
Channels have an associated 'type' that represents the format of the data that they can process.\
If the type is not specified or is blank, the service can handle any properly-formatted messages.\
It the type is specified, the channel can only be connected to a channel of the same type or a channel with no type specified\'85 this may lead to problems, as the type information is lost across services that can accept any type of message. \
ServiceContext objects set up a command port; the destructor closes the command port.\
ContextWithMDNS objects start an mDNS scan/post thread; the destructor stops the mDNS scan/post thread.\
ContextWithNetworking objects provide the logging mechanism and basic networking setup and shutdown.\
\
Application role = Source, Sink, Filter, Service, Utility, Test or Miscellaneous - this determines whether a command port is to be used and if the mDNS scan/post thread is needed.\
Test and Miscellaneous contexts won't need a command port; Source, Sink, Filter and Service contexts will respond on the command port while Utility contexts may send requests to a command port.\
Source, Sink and Filter contexts will have one or more channels.\
The non-registry applications use the command port of the Registry to get and set information.\
\
mDNS contexts: <an intermediate context class>\
Input/Output contexts: <an intermediate context class>\
Networking contexts: nImOlog, nImOpost\
Utility contexts: 
\f2\i nImOaddApp
\f0\i0 , nImOaddChannel, 
\f2\i nImObridge
\f0\i0 , nImOconnect, nImOdisconnect, nImOlist, 
\f2\i nImOloadApps
\f0\i0 , 
\f2\i nImOloadSetup
\f0\i0 , 
\f2\i nImOremoveApp
\f0\i0 , nImOstart, nImOstop, 
\f2\i nImOstoreApps
\f0\i0 , 
\f2\i nImOstoreSetup
\f0\i0 , 
\f2\i nImOupdateApp
\f0\i0 \
Filter contexts: nImOcommutator, 
\f2\i nImOdelay
\f0\i0 , 
\f2\i nImOjavaScript
\f0\i0 , nImOjunction, 
\f2\i nImOlisp
\f0\i0 , 
\f2\i nImOpython
\f0\i0 \
Service contexts: nImOregistry, nImOlauncher\
Sink contexts: nImOread, nImOrecord\
Source contexts: 
\f2\i nImOplayback
\f0\i0 , 
\f2\i nImOpulse
\f0\i0 , nImOwrite\
Miscellaneous contexts: 
\f2\i nImOricochet
\f0\i0 , 
\f2\i nImOricochetControl
\f0\i0 \
Test contexts: nImO*Test\
context-free: nImOcheckRegistry, nImOversion\
\
nImOlauncher reports its node name and its command port and IP address to the registry when starting and deletes the node name from the registry on exit.\
\
InputOutputContext <- FilterContext, SinkContext, SourceContext\
ServiceContext <- InputOutputContext, RegistryContext\
ContextWithMDNS <- ServiceContext, UtilityContext\
ContextWithNetworking <- ContextWithMDNS\
Context <- ContextWithNetworking, MiscellaneousContext, TestContext\
\
When a ContextWithMDNS is constructed, it will locate the Registry via mDNS, unless 'told not to'.\
//Locating an application will require determining the path to the running executable or some form of configuration file\'85 https://stackoverflow.com/questions/1528298/get-path-of-executable\
\
A RegistryProxy is used to formulate requests and handle responses from a Registry service; a Registry service owns a Registry and responds to the requests.\
This will allow unit testing of a Registry, since it will not require a command port.\
\
The configuration file will specify the IP address and port for logging as well as the amount of time to wait for a response from the Registry before restarting the mDNS scan, amongst other things.\
Use boost::optional when retrieving a value for a key from the configuration.\
\
Note that the firewall daemon, firewalld, on Manjaro, blocks multicast; something on OpenBSD is interfering with mDNS but not multicast.}