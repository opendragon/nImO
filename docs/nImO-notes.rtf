{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17280\viewh15700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 nImO \'97> support TCP, UDP, UDT?, multicast? channels; nImO processes report their endpoints via an mDNS channel\
\
use monads for return values in nImO?\
\
nImO nodes have a minimum of one channel - a command/response channel, advertised via mDNS.\
This channel is used to report the other channels available, their status and their 'mode'; it also responds to connect / disconnect requests and is used to determine if there are other nodes reporting the same names as the node wants to support.\
When a node is initialized, it advertises its command/response channel, as well as the (initial) channels that it has - after checking if it is already running.\
The other channel 'modes':\
	'IN' = a 'server' channel that can make multiple connections to 'OUT' channels, but only is unidirectional 'in'\
	'OUT' = a 'client' channel that can make a single connection to an 'IN' channel and is unidirectional 'out'; multiple logical 'out' connections are made via multiple physical connections\
	'SERVER' = a 'server' channel that can make multiple bidirectional connections to 'CLIENT' channels\
	'CLIENT' = a 'client' channel that can make a single connection to a 'SERVER' channel\
Note that the command/response channel is not displayed in the GUI, as it is an implementation issue.\
Command-line tools (and the GUI) can interact with the command/response channels, via code that uses the mDNS mechanisms to interrogate the advertised channels.\
Node names are hierarchical, as are the channel names. The format is TBD [but the 'mode' of a channel must be part of the name?].\
\
nImO contexts manage the channels (and threads to support I/O with them) as well as the identity of the nImO node - a context is created before doing any nImO operations, such as searching for a channel, registering or deregistering a channel, et cetera, is passed to all nImO I/O operations and is destroyed when completing all nImO operations.\
1) Create context\
2) Assign name for node in context => if already present [checked via mDNS], auto-rename or fail?\
3) Register channels for node in context [this involves mDNS operations]\
4) Signal 'operational' status\
5) \'85.\
n-3) Signal 'shutdown' status\
n-2) Close active connections to node channels\
n-1) Deregister node channels in context [mDNS operations]\
n) Destroy context\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 Node names:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 [Network:]Name  - where Network is established by a Bridge and Name is self-assigned; no Network implies the same subnet\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 Channel names:
\b0 \
[NodeName]/arbitrary-path[#Protocol] - where Protocol is in \{UDP, TCP, \'85\}; no NodeName implies the same machine; (physical) channels are assigned by the system; no Protocol implies TCP\
\
Minimal channel name = /arbitrary-path\
Maximal channel name = network:node/arbitrary-path#protocol\
\
IP addresses and physical channels are not part of either Channel or Node names; neither is the 'direction' of the channel\
}