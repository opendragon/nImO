{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25360\viewh24160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 nImO \'97> support TCP, UDP, UDT?; nImO processes report their endpoints via a registry entry\
OSC I/O ?\
\
use monads for return values in nImO?\
\
nImO nodes have a command/response port, recorded in the Registry.\
This port is used to report the other ports available, their status and 'mode'; it also responds to connect / disconnect requests and is used to determine if there are other nodes reporting the same names as the node wants to support.\
When a node is initialized, it advertises its command/response port, as well as the (initial) ports that it has - after checking if it is already running.\
The other port 'modes':\
	'IN' = a 'server' port that can make multiple connections to 'OUT' ports, but only is unidirectional 'in'\
	'OUT' = a 'client' port that can make a single connection to an 'IN' port and is unidirectional 'out'; multiple logical 'out' connections are made via multiple physical connections\
	'SERVER' = a 'server' port that can make multiple bidirectional connections to 'CLIENT' ports\
	'CLIENT' = a 'client' port that can make a single connection to a 'SERVER' port\
Note that the command/response port is not displayed in the GUI, as it is an implementation issue.\
Command-line tools (and the GUI) can interact with the command/response ports, via code that uses the Registry mechanisms to interrogate the advertised ports.\
Node names are hierarchical, as are the port names. The format is TBD [but the 'mode' of a port must be part of the name?].\
\
nImO contexts manage the ports (and threads to support I/O with them) as well as the identity of the nImO node - a context is created before doing any nImO operations, such as searching for a port, registering or deregistering a port, et cetera, is passed to all nImO I/O operations and is destroyed when completing all nImO operations.\
1) Create context/RAII\
2) Assign name for node in context => if already present [checked via Registry], auto-rename or fail?\
3) Register ports for node in context [this involves Registry operations]\
4) Signal 'operational' status\
5) \'85.\
n-3) Signal 'shutdown' status\
n-2) Close active connections to node ports\
n-1) Deregister node ports in context [Registry operations]\
n) Destroy context/RAII\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf0 Node names:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0 \cf0 [Network:]Name  - where Network is established by a Bridge and Name is self-assigned; no Network implies the same subnet; the name comes from the host name and service name or is directly provided.\
The default node name is <computer short name>-<service name>.\
The node name is modified by a tag number, so it will be <node>-<tag #> to allow multiple copies of a service on a machine.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf0 Port names:
\f0\b0 \
NodeName/arbitrary-path[#Protocol] - where Protocol is in \{UDP, TCP, \'85\}; (physical) ports are assigned by the system; no Protocol implies TCP\
IP addresses and physical ports are not part of either Port or Node names; neither is the 'direction' of the port\
\
Minimal port = node/arbitrary-path; maximal port = network:node/arbitrary-path#protocol\
\
ServiceContext objects set up a command port; the destructor closes the command port.\
ContextWithMDNS objects start an mDNS scan/post thread; the destructor stops the mDNS scan/post thread.\
ContextWithNetworking objects provide the logging mechanism and basic networking setup and shutdown.\
\
Application role = Source, Sink, Filter, Service, Utility, Test or Miscellaneous - this determines whether a command port is to be used and if the mDNS scan/post thread is needed.\
Test and Miscellaneous contexts won't need a command port; Source, Sink, Filter and Service contexts will respond on the command port while Utility contexts may send requests to a command port.\
Source, Sink and Filter contexts will have one or more data ports.\
The non-registry applications use the command port of the registry to get and set information.\
\
nImObridge, nImOconnect, nImOdisconnect, nImOlauncher and nImOregistry should be able to post to the 'logging' ports\
\
mDNS contexts: <an intermediate context class>\
Input/Output contexts: <an intermediate context class>\
Networking contexts: nImOmonitor, nImOpost\
Utility contexts: nImOaddApp, nImOloadApps, nImOremoveApp, nImOstoreApps, nImObridge, nImOconnect, nImOdisconnect, nImOinfo, nImOlist, nImOechoClient\
Filter contexts: nImOfanIn, nImOfanOut, nImOpassthrough\
Service contexts: nImOregistry, nImOechoService, nImOlauncher\
Sink contexts: nImOread\
Source contexts: nImOwrite\
Miscellaneous contexts: nImOricochet, nImOricochetControl\
Test contexts: nImO*Test\
context-free: nImOversion\
\
nImOaddApp should get the 'launch parameters' for an application and post them to the registry, while nImOremoveApp should clear them from the registry,\
nImOlauncher reports its node name and its command port and IP address to the registry when starting and deletes the node name from the registry on exit.\
\
InputOutputContext <- FilterContext, SinkContext, SourceContext\
ServiceContext <- InputOutputContext, RegistryContext\
ContextWithMDNS <- ServiceContext, UtilityContext\
ContextWithNetworking <- ContextWithMDNS\
Context <- ContextWithNetworking, MiscellaneousContext, TestContext\
\
The Registry should behave like the m+m registry combined with the Yarp search mechanism.\
When a ContextWithMDNS is constructed, it will locate the Registry via mDNS, unless 'told not to'.\
//Locating an application will require determining the path to the running executable or some form of configuration file\'85 https://stackoverflow.com/questions/1528298/get-path-of-executable\
\
A RegistryProxy is used to formulate requests and handle responses from a Registry service; a Registry service owns a Registry and responds to the requests.\
This will allow unit testing of a Registry, since it will not require a command port.\
\
The configuration file will specify the IP address and port for logging as well as the amount of time to wait for a response from the Registry before restarting the mDNS scan, amongst other things.\
Use boost::optional when retrieving a value for a key from the configuration.\
\
Note that the firewall daemon, firewalld, on Manjaro, blocks multicast.\
}