{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww26340\viewh22460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 it appears that both a TCP and a UDP socket can be opened with the same port\'85\
\
tools:\
* nImOaddChannel 'a' ['b'] - add a channel to the node 'a' with 'b' = true adding an output and 'b' = false adding an input ('b' defaults to false); 
\f1\b DONE
\f0\b0 \
* [nImObridge 'a' 'b' \'97 routing between networks; 'a' is the name of this network, 'b' is the address to connect to the other]\
* nImOcheck - returns zero if the registry detected and non-zero otherwise, so that scripts can start the registry; 
\f1\b DONE
\f0\b0 \
* nImOconnect 'c' 'd' ['m'] \'97 connects channel 'c' to channel 'd' with transport 'm' (TCP or UDP [or UDT]) [only one connection allowed between 'c' and 'd']; 
\f1\b DONE
\f0\b0 \
* nImOdisconnect 'c' \'97 removes connection from or to channel 'c'; 
\f1\b DONE\

\f0\b0 * nImOlist xyz \'97 reports all the known nodes, channels, connections, bridges, machines, applications depending on filters and options; 
\f1\b DONE
\f0\b0 \
* nImOlog - displays the log in a terminal; 
\f1\b DONE\

\f0\b0 * nImOplayback 'a' [ 'b' [ 'c' ]] - \ul sends messages from a file at a specified rate\ulnone \
* nImOpost 'a' 'b' - writes text to the log; 
\f1\b DONE
\f0\b0 \
* nImOread \'97 writes out the string representation of messages received; 
\f1\b DONE\

\f0\b0 * nImOrecord 'a' - writes out received messages to a file; 
\f1\b DONE
\f0\b0 \
* nImOstart [ 'a' [ 'b' ]] - starts a service via a launcher; 
\f1\b DONE
\f0\b0 \
* nImOversion \'97 reports the versions of the libraries; 
\f1\b DONE\

\f0\b0 * nImOwrite \'97 reads the string representation of a message and sends it out a channel; 
\f1\b DONE\

\f0\b0 \
interface:\
* nImOmanage - GUI application to display and control nImO applications\
* nImOwatch - like nImOlog but GUI-based\
\
examples:\
* nImOpulse ['t' [ 'd' ]] - sends a simple integer message on an interval of 't' seconds and duty cycle 'd' ('t' defaults to 1 and 'd' defaults to 0.5)\
* nImOricochet 'p' - forwards a message to the next machine in a list [uses unfiltered InChannels]\
* nImOricochetControl 'r' 'p' - creates a machine list and sends it to one of the machines ('r' indicates whether random or sequential machine order) [uses unfiltered inChannels]\
\
wiring:\
* nImOcommutator ['n' ['r']] - forwards a message to one of 'n' output channels (default 1), sequentially if 'r' is missing or false, randomly if true [default false]; 
\f1\b DONE
\f0\b0 \
* nImOdelay ['d'] - forwards any message from the input channel to the output channel after a delay of 'd' seconds ('d' defaults to 1); 
\f1\b DONE
\f0\b0 \
* nImOjunction ['n' ['m']] - forwards any messages from one of the 'n' input channels to all of the 'm' output channels ('n' and 'm' default to 1); 
\f1\b DONE
\f0\b0 \
\
application support:\
* nImOaddApp 'a' - adds an application to the list of available applications on the machine\
* nImOlauncher 'a' - records the machine and known applications with the Registry and waits for requests to start applications; 
\f1\b DONE
\f0\b0 \
* nImOloadApps 'a' - loads a set of applications\
* nImOloadSetup 'a' - loads a setup\
* nImOregistry - the Registry, one per LAN; 
\f1\b DONE
\f0\b0 \
* nImOremoveApp 'a' - removes an application from the list of available applications on the machine\
* nImOstop 'a' - shutdown one or all nodes or machines except active log programs; 
\f1\b DONE
\f0\b0 \
* nImOstoreApps 'a' - stores the current set of loaded applications\
* nImOstoreSetup 'a' - stores a setup\
* nImOupdateApp 'a' - update an application\
\
programmable services:\
* nImOjavaScript 'a' ['b' \'85 ] - loads and runs a JavaScript service\
* nImOlisp 'a' ['b' \'85 ] - loads and runs a Common Lisp service\
* nImOpython 'a' ['b' \'85 ] - loads and runs a Python service\
\
shell script:\
* nimo\
	provides a 'simplified' command-line interface to some of the executables, using the default options \
		nimo adda <a> - invokes nImOaddApp <a>\
		nImO addc <a> <b> - invokes nImOaddChannel <a> <b>\
		nimo bridge <a> <b> - invokes nImObridge <a> <b>\
		nimo check - invokes nImOcheck\
		nimo connect <c> <d> <m> - invokes nImOconnect <c> <d> <m>\
		nimo disconnect <c> - invokes nImOdisconnect <c>\
		nimo help - lists choices\
		nimo list <type> - invokes nImOlist <type>; with no <type>, lists choices\
		nimo loada <a> - invokes nImOloadApps <a>\
		nimo loads <a> - invokes nImOloadSetup <a>\
		nimo log - invokes nImOlog\
		nimo playback <a> <b> <c> - invokes nImOplayback <a> <b> <c>\
		nimo post <a> <b> - invokes nImOport <a> <b>\
		nimo read - invokes nImOread\
		nimo record <a> - invokes nImOrecord <a>\
		nimo remove <a> - invokes nImOremoveApp <a>\
		nimo start <a> <b> - invokes nImOstart <a> <b>\
		nimo stop <a> - invokes nImOstop <a>\
		nimo storea <a> - invokes nImOstoreApps <a>\
		nimo stores <a> - invokes nImOstoreSetup <a>\
		nimo update <a> - invokes nImOupdateApp <a>\
		nimo version - invokes nImOversion\
		nimo write - invokes nImOwrite\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b \cf2 \cb3 \expnd0\expndtw0\kerning0
fix CMakeLists.txt to use current SWIG commands; check what languages can be generated - currently Python and C#
\f0\b0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
}