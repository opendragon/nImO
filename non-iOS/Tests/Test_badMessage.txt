#--------------------------------------------------------------------------------------------------
#
#  File:       non-iOS/Tests/Test_badMessage.txt
#
#  Project:    nImO
#
#  Contains:   The CMAKE definitions for the unit test application.
#
#  Written by: Norman Jaffe
#
#  Copyright:  (c) 2020 by OpenDragon.
#
#              All rights reserved. Redistribution and use in source and binary forms, with or
#              without modification, are permitted provided that the following conditions are met:
#                * Redistributions of source code must retain the above copyright notice, this list
#                  of conditions and the following disclaimer.
#                * Redistributions in binary form must reproduce the above copyright notice, this
#                  list of conditions and the following disclaimer in the documentation and / or
#                  other materials provided with the distribution.
#                * Neither the name of the copyright holders nor the names of its contributors may
#                  be used to endorse or promote products derived from this software without
#                  specific prior written permission.
#
#              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#              EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#              OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#              SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#              INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#              TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#              BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#              CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#              ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#              DAMAGE.
#
#  Created:    2020-03-06
#
#--------------------------------------------------------------------------------------------------

set(THIS_TARGET nImObadMessageTest)

if(WIN32)
    set(VERS_RESOURCE ${THIS_TARGET}.rc)
else()
    set(VERS_RESOURCE "")
endif()

configure_file(${THIS_SOURCE_DIR}/${THIS_TARGET}.rc.in ${THIS_TARGET}.rc)

#add_library(nImOcommonTestSupport)

enable_testing()

add_executable(${THIS_TARGET}
               ${THIS_SOURCE_DIR}/nImObadMessageTest.cpp
               ${VERS_RESOURCE})

# Note that the order of inclusion of libraries is critical in Linux, as they appear to only be
# processed once.
#target_link_libraries(${THIS_TARGET} nImOcommonTestSupport ${nImO_LINK_LIBRARIES})
target_link_libraries(${THIS_TARGET} ${nImO_LINK_LIBRARIES})

fix_dynamic_libs(${THIS_TARGET})

## Test message with initial end tag
add_test(NAME TestMessageInitialEndTag COMMAND ${THIS_TARGET} 1)
## Test message with terminal start tag
add_test(NAME TestMessageTerminalStartTag COMMAND ${THIS_TARGET} 2)
## Test empty message with content
add_test(NAME TestEmptyMessageWithContent COMMAND ${THIS_TARGET} 3)
## Test non-empty message without content
add_test(NAME TestNonEmptyMessageWithoutContent COMMAND ${THIS_TARGET} 4)
## Test non-empty message with mismatched initial start tag
add_test(NAME TestNonEmptyMessageWithMismatchedInitialStartTag COMMAND ${THIS_TARGET} 5)
## Test non-empty message with mismatched terminal end tag
add_test(NAME TestNonEmptyMessageWithMismatchedTerminalEndTag COMMAND ${THIS_TARGET} 6)
## Test message with invalid content tag
add_test(NAME TestNonEmptyMessageWithInvalidContentTag COMMAND ${THIS_TARGET} 7)
## Test message with bad double count
add_test(NAME TestNonEmptyMessageWithZeroDoubleCount COMMAND ${THIS_TARGET} 8)
## Test message with string with bad length
add_test(NAME TestNonEmptyMessageWithStringWithInvalidLength COMMAND ${THIS_TARGET} 9)
## Test message with blob with invalid length
add_test(NAME TestNonEmptyMessageWithBlobWithInvalidLength COMMAND ${THIS_TARGET} 10)

## Test message with array with initial end tag
add_test(NAME TestNonEmptyMessageWithArrayWithInitialEndTag COMMAND ${THIS_TARGET} 20)
## Test message with array with terminal start tag
add_test(NAME TestNonEmptyMessageWithArrayWithTerminalStartTag COMMAND ${THIS_TARGET} 21)
## Test message with empty array with content
add_test(NAME TestNonEmptyMessageWithEmptyArrayWithContent COMMAND ${THIS_TARGET} 22)
## Test message with non-empty array without content
add_test(NAME TestNonEmptyMessageWithNonEmptyArrayWithoutContent COMMAND ${THIS_TARGET} 23)
## Test message with array with invalid count
add_test(NAME TestNonEmptyMessageWithNonEmptyArrayWithInvalidCount COMMAND ${THIS_TARGET} 24)
## Test message with array with too few values
add_test(NAME TestNonEmptyMessageWithNonEmptyArrayWithTooFewValues COMMAND ${THIS_TARGET} 25)
## Test message with array with too many values
add_test(NAME TestNonEmptyMessageWithNonEmptyArrayWithTooManyValues COMMAND ${THIS_TARGET} 26)
## Test message with array with too many double values
add_test(NAME TestNonEmptyMessageWithNonEmptyArrayWithTooManyDoubles COMMAND ${THIS_TARGET} 27)

## Test message with map with initial end tag
add_test(NAME TestNonEmptyMessageWithMapWithInitialEndTag COMMAND ${THIS_TARGET} 40)
## Test message with map with terminal start tag
add_test(NAME TestNonEmptyMessageWithMapWithTerminalStartTag COMMAND ${THIS_TARGET} 41)
## Test message with empty map with content
add_test(NAME TestNonEmptyMessageWithEmptyMapWithContent COMMAND ${THIS_TARGET} 42)
## Test message with non-empty map without content
add_test(NAME TestNonEmptyMessageWithNonEmptyMapWithoutContent COMMAND ${THIS_TARGET} 43)
## Test message with map with invalid count
add_test(NAME TestNonEmptyMessageWithNonEmptyMapWithInvalidCount COMMAND ${THIS_TARGET} 44)
## Test message with map with too few values
add_test(NAME TestNonEmptyMessageWithNonEmptyMapWithTooFewValues COMMAND ${THIS_TARGET} 45)
## Test message with map with too many values
add_test(NAME TestNonEmptyMessageWithNonEmptyMapWithTooManyValues COMMAND ${THIS_TARGET} 46)
## Test message with map with odd number of values
add_test(NAME TestNonEmptyMessageWithNonEmptyMapWithIncompletePair COMMAND ${THIS_TARGET} 47)

## Test message with set with initial end tag
add_test(NAME TestNonEmptyMessageWithSetWithInitialEndTag COMMAND ${THIS_TARGET} 60)
## Test message with set with terminal start tag
add_test(NAME TestNonEmptyMessageWithSetWithTerminalStartTag COMMAND ${THIS_TARGET} 61)
## Test message with empty set with content
add_test(NAME TestNonEmptyMessageWithEmptySetWithContent COMMAND ${THIS_TARGET} 62)
## Test message with non-empty set without content
add_test(NAME TestNonEmptyMessageWithNonEmptySetWithoutContent COMMAND ${THIS_TARGET} 63)
## Test message with set with invalid count
add_test(NAME TestNonEmptyMessageWithNonEmptySetWithInvalidCount COMMAND ${THIS_TARGET} 64)
## Test message with set with too few values
add_test(NAME TestNonEmptyMessageWithNonEmptySetWithTooFewValues COMMAND ${THIS_TARGET} 65)
## Test message with set with too many values
add_test(NAME TestNonEmptyMessageWithNonEmptySetWithTooManyValues COMMAND ${THIS_TARGET} 66)
