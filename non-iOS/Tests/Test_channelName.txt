#--------------------------------------------------------------------------------------------------
#
#  File:       non-iOS/Tests/Test_channelName.txt
#
#  Project:    nImO
#
#  Contains:   The CMAKE definitions for the unit test application.
#
#  Written by: Norman Jaffe
#
#  Copyright:  (c) 2020 by OpenDragon.
#
#              All rights reserved. Redistribution and use in source and binary forms, with or
#              without modification, are permitted provided that the following conditions are met:
#                * Redistributions of source code must retain the above copyright notice, this list
#                  of conditions and the following disclaimer.
#                * Redistributions in binary form must reproduce the above copyright notice, this
#                  list of conditions and the following disclaimer in the documentation and / or
#                  other materials provided with the distribution.
#                * Neither the name of the copyright holders nor the names of its contributors may
#                  be used to endorse or promote products derived from this software without
#                  specific prior written permission.
#
#              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#              EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#              OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#              SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#              INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#              TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#              BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#              CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#              ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#              DAMAGE.
#
#  Created:    2020-03-06
#
#--------------------------------------------------------------------------------------------------

set(THIS_TARGET nImOchannelNameTest)

if(WIN32)
    set(VERS_RESOURCE ${THIS_TARGET}.rc)
    configure_file(${THIS_SOURCE_DIR}/${THIS_TARGET}.rc.in ${THIS_TARGET}.rc)
else()
    set(VERS_RESOURCE "")
endif()

enable_testing()

add_executable(${THIS_TARGET}
                ${THIS_SOURCE_DIR}/nImOchannelNameTest.cpp
                ${VERS_RESOURCE})

# Note that the order of inclusion of libraries is critical in Linux, as they appear to only be
# processed once.
target_link_libraries(${THIS_TARGET} ${nImO_LINK_LIBRARIES})

fix_dynamic_libs(${THIS_TARGET})

## Test full channel name
add_test(NAME TestFullChannelName COMMAND ${THIS_TARGET} 1 t "this-net:this-node/arbitrary-path#udp")
## Test full channel name with empty network
add_test(NAME TestFullChannelNameEmptyNetwork COMMAND ${THIS_TARGET} 1 t ":this-node/arbitrary-path#tcp")
## Test full channel name with missing network
add_test(NAME TestFullChannelNameMissingNetwork COMMAND ${THIS_TARGET} 1 t "this-node/arbitrary-path#udp")
## Test full channel name with missing node
add_test(NAME TestFullChannelNameMissingNode COMMAND ${THIS_TARGET} 1 t "this-net:/arbitrary-path#udp")
## Test full channel name with missing protocol
add_test(NAME TestFullChannelNameMissingProtocol COMMAND ${THIS_TARGET} 1 t "this-net:this-node/arbitrary-path")
## Test full channel name with missing node and network
add_test(NAME TestFullChannelNameMissingNodeAndNetwork COMMAND ${THIS_TARGET} 1 t "/arbitrary-path#udp")
## Test minimal channel name
add_test(NAME TestMinimalChannelName COMMAND ${THIS_TARGET} 1 t "/arbitrary-path")
## Test channel name with longer path
add_test(NAME TestChannelNameWithLongerPath COMMAND ${THIS_TARGET} 1 t "/top/level/path/$has_special-chars")
## Test channel name with out-of-order delimiters
add_test(NAME TestChannelNameWithOutOfOrderDelimiters COMMAND ${THIS_TARGET} 1 f "this-net#udp:/arbitrary-path")
## Test channel name with missing path root
add_test(NAME TestChannelNameWithMissingPathRoot COMMAND ${THIS_TARGET} 1 f "arbitrary-path#udp")
## Test channel name with bad network name
add_test(NAME TestChannelNameWithBadNetworkName COMMAND ${THIS_TARGET} 1 f "this^net:this-mode/arbitrary-path#udp")
## Test channel name with bad node name
add_test(NAME TestChannelNameWithBadNodeName COMMAND ${THIS_TARGET} 1 f "this-net:this@mode/arbitrary-path#udp")
## Test channel name with bad path
add_test(NAME TestChannelNameWithBadPath COMMAND ${THIS_TARGET} 1 f "this-net:this-mode/arbitrary%path#udp")
## Test channel name with bad protocol
add_test(NAME TestChannelNameWithBadProtocol COMMAND ${THIS_TARGET} 1 f "this-net:this-mode/arbitrary_path#http")
## Test channel name with empty path
add_test(NAME TestChannelNameWithEmptyPath COMMAND ${THIS_TARGET} 1 f "this-net:this-mode/#tcp")
## Test channel name with empty protocol
add_test(NAME TestChannelNameWithEmptyProtocol COMMAND ${THIS_TARGET} 1 f "this-net:this-mode/arbitrary-path#")
## Test full channel name, fetch name
add_test(NAME TestFullChannelNameGetName COMMAND ${THIS_TARGET} 2 t "this-net:this-node/arbitrary-path#udp" "this-net:this-node/arbitrary-path#udp")
## Test full channel name with empty network, fetch name
add_test(NAME TestFullChannelNameEmptyNetworkGetName COMMAND ${THIS_TARGET} 2 t ":this-node/arbitrary-path#tcp" "this-node/arbitrary-path#tcp")
## Test full channel name with missing network, fetch name
add_test(NAME TestFullChannelNameMissingNetworkGetName COMMAND ${THIS_TARGET} 2 t "this-node/arbitrary-path#udp" "this-node/arbitrary-path#udp")
## Test full channel name with missing node, fetch name
add_test(NAME TestFullChannelNameMissingNodeGetName COMMAND ${THIS_TARGET} 2 t "this-net:/arbitrary-path#udp" "this-net:/arbitrary-path#udp")
## Test full channel name with missing protocol, fetch name
add_test(NAME TestFullChannelNameMissingProtocolGetName COMMAND ${THIS_TARGET} 2 t "this-net:this-node/arbitrary-path" "this-net:this-node/arbitrary-path")
## Test full channel name with missing node and network, fetch name
add_test(NAME TestFullChannelNameMissingNodeAndNetworkGetName COMMAND ${THIS_TARGET} 2 t "/arbitrary-path#udp" "/arbitrary-path#udp")
## Test minimal channel name, fetch name
add_test(NAME TestMinimalChannelNameGetName COMMAND ${THIS_TARGET} 2 t "/arbitrary-path" "/arbitrary-path")
## Test channel name with longer path, fetch name
add_test(NAME TestChannelNameWithLongerPathGetName COMMAND ${THIS_TARGET} 2 t "/top/level/path/$has_special-chars" "/top/level/path/$has_special-chars")
## Test full channel name, fetch network
add_test(NAME TestFullChannelNameGetNetwork COMMAND ${THIS_TARGET} 3 t "this-net:this-node/arbitrary-path#udp" "this-net")
## Test full channel name with empty network, fetch network
add_test(NAME TestFullChannelNameEmptyNetworkGetNetwork COMMAND ${THIS_TARGET} 3 t ":this-node/arbitrary-path#tcp" "")
## Test full channel name with missing network, fetch network
add_test(NAME TestFullChannelNameMissingNetworkGetNetwork COMMAND ${THIS_TARGET} 3 t "this-node/arbitrary-path#udp" "")
## Test full channel name with missing node, fetch network
add_test(NAME TestFullChannelNameMissingNodeGetNetwork COMMAND ${THIS_TARGET} 3 t "thIs-net:/arbitrary-path#udp" "thIs-net")
## Test full channel name with missing protocol, fetch network
add_test(NAME TestFullChannelNameMissingProtocolGetNetwork COMMAND ${THIS_TARGET} 3 t "this-Net:this-node/arbitrary-path" "this-Net")
## Test full channel name with missing node and network, fetch network
add_test(NAME TestFullChannelNameMissingNodeAndNetworkGetNetwork COMMAND ${THIS_TARGET} 3 t "/arbitrary-path#udp" "")
## Test minimal channel name, fetch network
add_test(NAME TestMinimalChannelNameGetNetwork COMMAND ${THIS_TARGET} 3 t "/arbitrary-path" "")
## Test channel name with longer path, fetch network
add_test(NAME TestChannelNameWithLongerPathGetNetwork COMMAND ${THIS_TARGET} 3 t "/top/level/path/$has_special-chars" "")
## Test full channel name, fetch node
add_test(NAME TestFullChannelNameGetNode COMMAND ${THIS_TARGET} 4 t "this-net:this-node/arbitrary-path#udp" "this-node")
## Test full channel name with empty network, fetch node
add_test(NAME TestFullChannelNameEmptyNetworkGetNode COMMAND ${THIS_TARGET} 4 t ":thiS-node/arbitrary-path#tcp" "thiS-node")
## Test full channel name with missing network, fetch node
add_test(NAME TestFullChannelNameMissingNetworkGetNode COMMAND ${THIS_TARGET} 4 t "this-Node/arbitrary-path#udp" "this-Node")
## Test full channel name with missing node, fetch node
add_test(NAME TestFullChannelNameMissingNodeGetNode COMMAND ${THIS_TARGET} 4 t "this-net:/arbitrary-path#udp" "")
## Test full channel name with missing protocol, fetch node
add_test(NAME TestFullChannelNameMissingProtocolGetNode COMMAND ${THIS_TARGET} 4 t "this-net:this-noDe/arbitrary-path" "this-noDe")
## Test full channel name with missing node and network, fetch node
add_test(NAME TestFullChannelNameMissingNodeAndNetworkGetNode COMMAND ${THIS_TARGET} 4 t "/arbitrary-path#udp" "")
## Test minimal channel name, fetch node
add_test(NAME TestMinimalChannelNameGetNode COMMAND ${THIS_TARGET} 4 t "/arbitrary-path" "")
## Test channel name with longer path, fetch node
add_test(NAME TestChannelNameWithLongerPathGetNode COMMAND ${THIS_TARGET} 4 t "/top/level/path/$has_special-chars" "")
## Test full channel name, fetch path
add_test(NAME TestFullChannelNameGetPath COMMAND ${THIS_TARGET} 5 t "this-net:this-node/Arbitrary-path#udp" "/Arbitrary-path")
## Test full channel name with empty network, fetch path
add_test(NAME TestFullChannelNameEmptyNetworkGetPath COMMAND ${THIS_TARGET} 5 t ":this-node/aRbitrary-path#tcp" "/aRbitrary-path")
## Test full channel name with missing network, fetch path
add_test(NAME TestFullChannelNameMissingNetworkGetPath COMMAND ${THIS_TARGET} 5 t "this-node/arbitrary-Path#udp" "/arbitrary-Path")
## Test full channel name with missing node, fetch path
add_test(NAME TestFullChannelNameMissingNodeGetPath COMMAND ${THIS_TARGET} 5 t "this-net:/arbitrary-patH#udp" "/arbitrary-patH")
## Test full channel name with missing protocol, fetch path
add_test(NAME TestFullChannelNameMissingProtocolGetPath COMMAND ${THIS_TARGET} 5 t "this-net:this-node/arbitrarY-path" "/arbitrarY-path")
## Test full channel name with missing node and network, fetch path
add_test(NAME TestFullChannelNameMissingNodeAndNetworkGetPath COMMAND ${THIS_TARGET} 5 t "/arbitraRy-path#udp" "/arbitraRy-path")
## Test minimal channel name, fetch path
add_test(NAME TestMinimalChannelNameGetPath COMMAND ${THIS_TARGET} 5 t "/arbitrAry-path" "/arbitrAry-path")
## Test channel name with longer path, fetch path
add_test(NAME TestChannelNameWithLongerPathGetPath COMMAND ${THIS_TARGET} 5 t "/top/level/path/$has_special-chars" "/top/level/path/$has_special-chars")
## Test full channel name, fetch protocol
add_test(NAME TestFullChannelNameGetProtocol COMMAND ${THIS_TARGET} 6 t "this-net:this-node/arbitrary-path#udp" "udp")
## Test full channel name with empty network, fetch protocol
add_test(NAME TestFullChannelNameEmptyNetworkGetProtocol COMMAND ${THIS_TARGET} 6 t ":this-node/arbitrary-path#tcp" "tcp")
## Test full channel name with missing network, fetch protocol
add_test(NAME TestFullChannelNameMissingNetworkGetProtocol COMMAND ${THIS_TARGET} 6 t "this-node/arbitrary-path#udp" "udp")
## Test full channel name with missing node, fetch protocol
add_test(NAME TestFullChannelNameMissingNodeGetProtocol COMMAND ${THIS_TARGET} 6 t "this-net:/arbitrary-path#udp" "udp")
## Test full channel name with missing protocol, fetch protocol
add_test(NAME TestFullChannelNameMissingProtocolGetProtocol COMMAND ${THIS_TARGET} 6 t "this-net:this-node/arbitrary-path" "unknown")
## Test full channel name with missing node and network, fetch protocol
add_test(NAME TestFullChannelNameMissingNodeAndNetworkGetProtocol COMMAND ${THIS_TARGET} 6 t "/arbitrary-path#udp" "udp")
## Test minimal channel name, fetch protocol
add_test(NAME TestMinimalChannelNameGetProtocol COMMAND ${THIS_TARGET} 6 t "/arbitrary-path" "unknown")
## Test channel name with longer path, fetch protocol
add_test(NAME TestChannelNameWithLongerPathGetProtocol COMMAND ${THIS_TARGET} 6 t "/top/level/path/$has_special-chars" "unknown")
