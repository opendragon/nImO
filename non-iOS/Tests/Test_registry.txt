#--------------------------------------------------------------------------------------------------
#
#  File:       non-iOS/Tests/Test_registry.txt
#
#  Project:    nImO
#
#  Contains:   The CMAKE definitions for the unit test application.
#
#  Written by: Norman Jaffe
#
#  Copyright:  (c) 2023 by OpenDragon.
#
#              All rights reserved. Redistribution and use in source and binary forms, with or
#              without modification, are permitted provided that the following conditions are met:
#                * Redistributions of source code must retain the above copyright notice, this list
#                  of conditions and the following disclaimer.
#                * Redistributions in binary form must reproduce the above copyright notice, this
#                  list of conditions and the following disclaimer in the documentation and / or
#                  other materials provided with the distribution.
#                * Neither the name of the copyright holders nor the names of its contributors may
#                  be used to endorse or promote products derived from this software without
#                  specific prior written permission.
#
#              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#              EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#              OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#              SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#              INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#              TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#              BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#              CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#              ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#              DAMAGE.
#
#  Created:    2023-01-26
#
#--------------------------------------------------------------------------------------------------

set(THIS_TARGET nImOregistryTest)

if(WIN32)
    set(VERS_RESOURCE ${THIS_TARGET}.rc)
    configure_file(${THIS_SOURCE_DIR}/${THIS_TARGET}.rc.in ${THIS_TARGET}.rc)
else()
    set(VERS_RESOURCE "")
endif()

enable_testing()

include_directories("${nImO_SQLITE_DIR}")

add_executable(${THIS_TARGET}
               ${THIS_SOURCE_DIR}/nImOregistryTest.cpp
               ${THIS_SOURCE_DIR}/../Registry/nImOregistry.cpp
               ${THIS_SOURCE_DIR}/../Registry/nImOregistryContext.cpp
               ${nImO_SQLITE_DIR}/sqlite3.c
               ${VERS_RESOURCE})

# Note that the order of inclusion of libraries is critical in Linux, as they appear to only be
# processed once.
target_link_libraries(${THIS_TARGET} ${nImO_LINK_LIBRARIES})

fix_dynamic_libs(${THIS_TARGET})

## Test create a Registry
add_test(NAME TestCreateRegistry COMMAND ${THIS_TARGET} 1)
## Test check empty Registry for nodes
add_test(NAME TestEmptyRegistryForNodes COMMAND ${THIS_TARGET} 2)
## Test check node set with empty Registry
add_test(NAME TestNodeSetWithEmptyRegistry COMMAND ${THIS_TARGET} 3)
## Test check find with empty Registry
add_test(NAME TestFindWithEmptyRegistry COMMAND ${THIS_TARGET} 4)
## Test add node to Registry
add_test(NAME TestAddNodeToRegistry COMMAND ${THIS_TARGET} 5)
## Test check count with Registry with one node
add_test(NAME TestCountWithRegistryWithOneNode COMMAND ${THIS_TARGET} 6)
## Test check node set with Registry with one node
add_test(NAME TestNodeSetWithRegistryWithOneNode COMMAND ${THIS_TARGET} 7)
## Test check find with Registry with one node
add_test(NAME TestFindWithRegistryWithOneNode COMMAND ${THIS_TARGET} 8)
## Test check node data added to Registry
add_test(NAME TestNodeDataAddedToRegistry COMMAND ${THIS_TARGET} 9)
## Test remove node from Registry
add_test(NAME TestRemoveNodeFromRegistry COMMAND ${THIS_TARGET} 10)
## Test check count with Registry with node removed
add_test(NAME TestCountWithRegistryWithNodeRemoved COMMAND ${THIS_TARGET} 11)
## Test check node set with Registry with node removed
add_test(NAME TestNodeSetWithRegistryWithNodeRemoved COMMAND ${THIS_TARGET} 12)
## Test check find with Registry with node removed
add_test(NAME TestFindWithRegistryNodeRemoved COMMAND ${THIS_TARGET} 13)
## Test add two distinct nodes to Registry
add_test(NAME TestAddTwoDistinctNodesToRegistry COMMAND ${THIS_TARGET} 14)
## Test check count with Registry with two nodes
add_test(NAME TestCountWithRegistryWithTwoNodes COMMAND ${THIS_TARGET} 15)
## Test check node set with Registry with node removed
add_test(NAME TestNodeSetWithRegistryWithTwoNodes COMMAND ${THIS_TARGET} 16)
## Test check find with Registry with two nodes
add_test(NAME TestFindWithRegistryWithTwoNodes COMMAND ${THIS_TARGET} 17)
## Test remove added nodes from Registry
add_test(NAME TestRemoveNodesFromRegistry COMMAND ${THIS_TARGET} 18)
## Test check count with Registry with all nodes removed
add_test(NAME TestCountWithRegistryWithAllNodesRemoved COMMAND ${THIS_TARGET} 19)
## Test check node set with Registry with node removed
add_test(NAME TestNodeSetWithRegistryWithAllNodesRemoved COMMAND ${THIS_TARGET} 20)
## Test check find with Registry with all nodes removed
add_test(NAME TestFindWithRegistryAllNodesRemoved COMMAND ${THIS_TARGET} 21)
## Test add two identical nodes to Registry
add_test(NAME TestAddTwoIdenticalNodesToRegistry COMMAND ${THIS_TARGET} 22)
