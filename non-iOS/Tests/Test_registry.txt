#--------------------------------------------------------------------------------------------------
#
#  File:       non-iOS/Tests/Test_registry.txt
#
#  Project:    nImO
#
#  Contains:   The CMAKE definitions for the unit test application.
#
#  Written by: Norman Jaffe
#
#  Copyright:  (c) 2023 by OpenDragon.
#
#              All rights reserved. Redistribution and use in source and binary forms, with or
#              without modification, are permitted provided that the following conditions are met:
#                * Redistributions of source code must retain the above copyright notice, this list
#                  of conditions and the following disclaimer.
#                * Redistributions in binary form must reproduce the above copyright notice, this
#                  list of conditions and the following disclaimer in the documentation and / or
#                  other materials provided with the distribution.
#                * Neither the name of the copyright holders nor the names of its contributors may
#                  be used to endorse or promote products derived from this software without
#                  specific prior written permission.
#
#              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#              EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#              OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#              SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#              INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#              TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#              BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#              CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#              ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#              DAMAGE.
#
#  Created:    2023-01-26
#
#--------------------------------------------------------------------------------------------------

set(THIS_TARGET nImOregistryTest)

if(WIN32)
    set(VERS_RESOURCE ${THIS_TARGET}.rc)
    configure_file(${THIS_SOURCE_DIR}/${THIS_TARGET}.rc.in ${THIS_TARGET}.rc)
else()
    set(VERS_RESOURCE "")
endif()

enable_testing()

include_directories("${nImO_SQLITE_DIR}")

add_executable(${THIS_TARGET}
               ${THIS_SOURCE_DIR}/nImOregistryTest.cpp
               ${THIS_SOURCE_DIR}/../Registry/nImOregistry.cpp
               ${nImO_SQLITE_DIR}/sqlite3.c
               ${VERS_RESOURCE})

# Note that the order of inclusion of libraries is critical in Linux, as they appear to only be
# processed once.
target_link_libraries(${THIS_TARGET} ${nImO_LINK_LIBRARIES})

fix_dynamic_libs(${THIS_TARGET})

## Test create a Registry
add_test(NAME TestCreateRegistry COMMAND ${THIS_TARGET} 1)
## Test check empty Registry for nodes
add_test(NAME TestEmptyRegistryForNodes COMMAND ${THIS_TARGET} 2)
## Test add node to Registry
add_test(NAME TestAddNodeToRegistry COMMAND ${THIS_TARGET} 3)
## Test remove node from Registry
add_test(NAME TestRemoveNodeFromRegistry COMMAND ${THIS_TARGET} 4)
## Test add two distinct nodes to Registry
add_test(NAME TestAddTwoDistinctNodesToRegistry COMMAND ${THIS_TARGET} 5)
## Test remove added nodes from Registry
add_test(NAME TestRemoveNodesFromRegistry COMMAND ${THIS_TARGET} 6)
## Test add two identical nodes to Registry
add_test(NAME TestAddTwoIdenticalNodesToRegistry COMMAND ${THIS_TARGET} 7)


### From m+m registry tests:
## Test create register service
#add_test(NAME TestCreateRegistryService1 COMMAND ${THIS_TARGET} 13)
#add_test(NAME TestCreateRegistryService2 COMMAND ${THIS_TARGET} 13 "12350")
## Test register request, second service
#add_test(NAME TestRequestRegistryService1 COMMAND ${THIS_TARGET} 14)
#add_test(NAME TestRequestRegistryService2 COMMAND ${THIS_TARGET} 14 "12351")
## Test unregister request, second service
#add_test(NAME TestRequestUnregisterService1 COMMAND ${THIS_TARGET} 15)
#add_test(NAME TestRequestUnregisterService2 COMMAND ${THIS_TARGET} 15 "12352")
## Test search for request / service - note the change in arguments
#add_test(NAME TestRequestSearchService1 COMMAND ${THIS_TARGET} 16 0 "" "FAILED \"An error message\"")
#add_test(NAME TestRequestSearchService2 COMMAND ${THIS_TARGET} 16 0 "Version: 42" "OK ()")
#add_test(NAME TestRequestSearchService3 COMMAND ${THIS_TARGET} 16 0 "Details:Echo*" "OK (/_service_/test/requestsearchservice)")
#add_test(NAME TestRequestSearchService4 COMMAND ${THIS_TARGET} 16 0 "Details:Echo*,Keyword:(requests)" "OK (/_service_/test/requestsearchservice /$ervice)")
#add_test(NAME TestRequestSearchService5 COMMAND ${THIS_TARGET} 16 0 "Description:*unit\\ tests" "OK (/_service_/test/requestsearchservice)")
#add_test(NAME TestRequestSearchService6 COMMAND ${THIS_TARGET} 16 1 "Details:Echo*" "OK (Test16)")
#add_test(NAME TestRequestSearchService7 COMMAND ${THIS_TARGET} 16 1 "Details:Echo*,Keyword:(requests)" "OK (Registry Test16)")
#add_test(NAME TestRequestSearchService8 COMMAND ${THIS_TARGET} 16 1 "Description:*unit\\ tests" "OK (Test16)")
